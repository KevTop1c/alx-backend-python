name: Django CI/CD Pipeline

on:
   workflow_call:
jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: MySQL@001
          MYSQL_DATABASE: test_alx_messaging_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: MySQL@001
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            default-libmysqlclient-dev \
            pkg-config \
            gcc \
            python3-dev

      - name: Install Python dependencies
        working-directory: ./messaging_app
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django pytest-cov coverage

      - name: Wait for MySQL to be ready
        run: |
          echo "Waiting for MySQL to be ready..."
          for i in {1..30}; do
            if mysqladmin ping -h"127.0.0.1" -P3306 -uroot -proot_password --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL... ($i/30)"
            sleep 2
          done

      - name: Create test database
        run: |
          mysql -h 127.0.0.1 -P 3306 -u root -proot_password -e "CREATE DATABASE IF NOT EXISTS test_messaging_db;"
          mysql -h 127.0.0.1 -P 3306 -u root -proot_password -e "GRANT ALL PRIVILEGES ON test_messaging_db.* TO 'test_user'@'%';"
          mysql -h 127.0.0.1 -P 3306 -u root -proot_password -e "FLUSH PRIVILEGES;"

      - name: Set up environment variables
        working-directory: ./messaging_app
        run: |
          echo "DJANGO_DEBUG=True" >> $GITHUB_ENV
          echo "DJANGO_SECRET_KEY=test-secret-key-for-github-actions" >> $GITHUB_ENV
          echo "MYSQL_DB=test_messaging_db" >> $GITHUB_ENV
          echo "MYSQL_USER=test_user" >> $GITHUB_ENV
          echo "MYSQL_PASSWORD=test_password" >> $GITHUB_ENV
          echo "MYSQL_HOST=127.0.0.1" >> $GITHUB_ENV
          echo "MYSQL_PORT=3306" >> $GITHUB_ENV
          echo "DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1" >> $GITHUB_ENV

      - name: Run Django system checks
        working-directory: ./messaging_app
        env:
          MYSQL_DB: test_alx_messaging_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: MySQL
          MYSQL_HOST: 127.0.0.1
          MYSQL_PORT: 3306
          DJANGO_SECRET_KEY: test-secret-key-for-github-actions
          DJANGO_DEBUG: True
          DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1
        run: |
          python manage.py check

      - name: Run migrations
        working-directory: ./messaging_app
        env:
          MYSQL_DB: test_alx_messaging_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: MySQL
          MYSQL_HOST: 127.0.0.1
          MYSQL_PORT: 3306
          DJANGO_SECRET_KEY: test-secret-key-for-github-actions
          DJANGO_DEBUG: True
          DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1
        run: |
          python manage.py migrate --noinput

      - name: Run tests with pytest
        working-directory: ./messaging_app
        env:
          MYSQL_DB: test_alx_messaging_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: MySQL
          MYSQL_HOST: 127.0.0.1
          MYSQL_PORT: 3306
          DJANGO_SECRET_KEY: test-secret-key-for-github-actions
          DJANGO_DEBUG: True
          DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1
        run: |
          # Run pytest if tests directory exists
          if [ -d "tests" ] || find . -name "test_*.py" -o -name "*_test.py" | grep -q .; then
            pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term -v
          else
            echo "No tests found. Running Django test command..."
            python manage.py test --verbosity=2 || echo "No Django tests found"
          fi

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.13'
        with:
          file: ./messaging_app/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-python-${{ matrix.python-version }}
          path: |
            messaging_app/htmlcov/
            messaging_app/coverage.xml
          retention-days: 30

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Run flake8
        working-directory: ./messaging_app
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true

      - name: Check code formatting with black
        working-directory: ./messaging_app
        run: |
          black --check . || true

      - name: Check import sorting with isort
        working-directory: ./messaging_app
        run: |
          isort --check-only . || true
