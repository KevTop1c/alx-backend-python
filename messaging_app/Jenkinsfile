pipeline {
    agent any
    
    environment {
        // Virtual environment will be created in the workspace
        VENV_DIR = 'venv'
    }
    
    stages {
        stage('Checkout') {
            steps {
                // Pull code from GitHub
                git branch: 'main',
                    credentialsId: 'github-credentials',
                    url: 'https://github.com/KevTop1c/alx-backend-python.git'
                
                echo 'Code checked out successfully'
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                script {
                    // Create virtual environment and install dependencies
                    sh '''
                        # Create virtual environment
                        python3 -m venv ${VENV_DIR}
                        
                        # Activate virtual environment and install dependencies
                        . ${VENV_DIR}/bin/activate
                        
                        pip install --upgrade pip
                        pip install pytest pytest-html parameterized
                        
                        # Install project dependencies if requirements.txt exists
                        if [ -f requirements.txt ]; then
                            pip install -r requirements.txt
                        fi
                    '''
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                script {
                    // Activate virtual environment and run pytest only in tests directory
                    sh '''
                        . ${VENV_DIR}/bin/activate
                        
                        # Run tests only if tests directory exists
                        if [ -d "tests" ]; then
                            pytest tests/ --html=report.html --self-contained-html --verbose
                        else
                            echo "No tests directory found. Running pytest in current directory."
                            pytest . --html=report.html --self-contained-html --verbose
                        fi
                    '''
                }
            }
        }
        
        stage('Generate Report') {
            steps {
                // Archive the test report
                publishHTML(target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: '.',
                    reportFiles: 'report.html',
                    reportName: 'Pytest HTML Report'
                ])
                
                echo 'Test report generated and published'
            }
        }
    }
    
    post {
        always {
            // Clean up workspace
            echo 'Pipeline execution completed'
        }
        success {
            echo 'All tests passed successfully!'
        }
        failure {
            echo 'Tests failed. Check the report for details.'
        }
    }
}