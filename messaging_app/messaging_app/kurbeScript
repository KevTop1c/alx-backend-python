#!/bin/bash

# kurbeScript - Kubernetes Local Cluster Setup and Verification
set -e # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}
log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if running on supported OS
check_os() {
    case "$(uname -s)" in
        Darwin*)  OS="macOS";;
        Linux*)   OS="Linux";;
        CYGWIN*)  OS="Windows";;
        MINGW*)   OS="Windows";;
        *)        OS="UNKNOWN";;
    esac
    log_info "Detected operating system: $OS"
}

# Check if minikube is installed
check_minikube_installed() {
    log_info "Checking if Minikube is installed..."
    if command -v minikube &> /dev/null; then
        MINIKUBE_VERSION=$(minikube version --short)
        log_success "Minikube is installed: $MINIKUBE_VERSION"
        return 0
    else
        log_error "Minikube is not installed"
        return 1
    fi
}

# Install Minikube (for MacOS with Homebrew)
install_minikube_macos() {
    log_info "Installing Minikube using Homebrew..."
    if command -v brew &> /dev/null; then
        brew install minikube
    else 
        log_error "Homebrew not found. Please install Homebrew first or install Minikube manually"
        exit 1
    fi
}

# Install Minikube (for Linux)
install_minikube_linux() {
    log_info "Installing Minikube on Linux..."
    # Download and install Minikube
    curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
    sudo install minikube-linux-amd64 /usr/local/bin/minikube
    rm minikube-linux-amd64
}

# Install kubectl if not present
install_kubectl() {
    log_info "Checking if kubectl is installed..."
    if ! command -v kubectl &> /dev/null; then
        log_warning "kubectl not found. Installing kubectl..."

        case "$OS" in
            "macOS")
                if command -v brew &> /dev/null; then
                    brew install kubectl
                else
                    # Download directly
                    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/amd64/kubectl"
                    chmod +x kubectl
                    sudo mv kubectl /usr/local/bin
                fi
                ;;
            "Linux")
                curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                chmod +x kubectl
                sudo mv kubectl /usr/local/bin/
                ;;
            "Windows")
                log_warning "Please install kubectl manually on Windows from: https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/"
                exit 1
                ;;
        esac
        log_success "kubectl installed successfully"
    else
        log_success "kubectl already installed"
    fi
}

# Start Minikube cluster
start_cluster() {
    log_info "Starting Minikube cluster..."

    # Check if cluster is already running
    if minikube status | grep -q "Running"; then
        log_warning "Minikube cluster already running"
        return 0
    fi

    # Start cluster with recommended settings
    minikube start --driver=docker --memory=3000 --cpus=2

    if [ $? -eq 0 ]; then
        log_success "Minikube cluster started successfully"
    else
        log_error "Failed to start Minikube cluster"
        exit 1
    fi
}

# Verify cluster is running
verify_cluster() {
    log_info "Verifying cluster status..."

    # Check cluster info
    kubectl cluster-info

    if [ $? -eq 0 ]; then
        log_success "Cluster is running and accessible"
    else
        log_error "Cluster verification failed"
        exit 1
    fi
}

# Get available pods
get_pods() {
    log_info "Retrieving available pods..."

    # Wait a moment for system pods to be ready
    sleep 10

    echo -e "\n${BLUE}=== Current pods in cluster ===${NC}"
    kubectl get pods --all-namespaces

    echo -e "\n${BLUE}=== Pods in kube-system namespace ===${NC}"
    kubectl get pods -n kube-system
}

# Main execution
main() {
    log_info "Starting Kubernetes local cluster setup..."

    check_os

    # Ensure Minikube is installed
    if ! check_minikube_installed; then
        case "$OS" in   
            "macOS") install_minikube_macos ;;
            "Linux") install_minikube_linux ;;
            *)
                log_error "Unsupported operating system for automatic installation"
                log_info "Please install Minikube manually from: https://minikube.sigs.k8s.io/docs/start/"
                exit 1 ;;
        esac
    fi 

    # Install kubectl if needed
    install_kubectl

    # Start cluster
    start_cluster

    # Verify cluster
    verify_cluster

    # Get pods
    get_pods

    log_success "Kubernetes local cluster setup completed successfully!"
    log_info "You can now use 'kubectl' to interact with your cluster"
    log_info "To stop the cluster, run: minikube stop"
    log_info "To delete the cluster, run: minikube delete"
}

# Run main function
main "$@"